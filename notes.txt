Checklist

1) Be able to output in asssembly <- GOOD
2) Fix Hello World
3) Get VGA to work <- GOOD
4) Build board <- Board Built
    What about cells? What do I do with those? 1x1 use code 15
    Fix shift of boarder

    This ugly

    Every 320 is the start of line
    Every 160 is placement of normal cell

    So with the  - start with offset of 4
    cx doesn't work for a counter? So use of AX

5) Character and movement DONE
    To do this what do I have to do? Get box cursor
    Moving with up, down, left, right moves cursor 4 bytes
    use dl for column, and dh for row

6) Placement of mines and mine masking (Dedicate areas to where)
    Mines are originally masked, when user presses space, it checks the
    adjacent cells around to determine if player dies

    For some reason, space does not activate mine. Comparison of al and 43
    does not work for some reason. What the fuck

    Bomb Placements:
    push 166
    push 206
    push 494
    push 1174
    push 846
    push 1142
    push 1466
    push 1492

7) Restart button, at the moment only end game works
    Go to main, and let f8 be the button to loop back
    let f9 be the button to quit

8) Press space to activate if mines are there ???

9) Prevent user from moving outside of boarders DONE
    Check current position of cursor, if a ascii character exists there.
    if user_moves
        check()

Registers and Shit
-----------------------------------------------------
A: accumulator use for most operations
B: base hold address of procedure/variable
C: count used for looping
d: data used for multiplication and division

CS – Code Segment, base location of program code
DS – Data Segment, base location for variables
SS – Stack Segment.  Base location of the stack
ES – Extra Segment.  Additional base location for variables in memory

BP – Base Pointer, offset from SS register to locate variables on the stack
SP – Stack Pointer, offset from SS register as to the location of the stack’s top
SI – Source Index, used for copying strings, segment register varies
DI – Destination Index, used for destination for copying strings

Resources:

Interrupt DOS codes
https://www.csc.depauw.edu/~bhoward/asmtut/asmtut12.html#topic11

Information on Memory Addressing and Registers
www.math.uaa.alaska.edu/~afkjm/cs221/handouts/irvine2.pdf

INT 16 Keyboard BIOS
http://stanislavs.org/helppc/int_16.html

Arrays and Addressing Modes
http://www.shsu.edu/csc_tjm/fall2005/cs272/arrays.html

Cursor Position:
https://stackoverflow.com/questions/46387989/move-cursor-using-arrow-keys-in-assembly

Keyboard Codes:
http://faydoc.tripod.com/structures/00/0006.htm
